// processing
// extract specific data from the root
rootChildren = root.content;
for(var i = 0; i < rootChildren.length; i++)
{
	if(rootChildren[i].tagName.toLowerCase().equals("tags"))
	{
		var tags = rootChildren[i].content;
	}
	else if(rootChildren[i].tagName.toLowerCase().equals("title"))
	{
		var title = rootChildren[i].content;
	}
	else if(rootChildren[i].tagName.toLowerCase().equals("form"))
	{
		var form = rootChildren[i].content;
	}
	else if(rootChildren[i].tagName.toLowerCase().equals("pagenum"))
	{
		var pageNum = rootChildren[i].content;
	}
	else if(rootChildren[i].tagName.toLowerCase().equals("bookmark"))
	{
		var bookmark = rootChildren[i].content;
	}
	else if(rootChildren[i].tagName.toLowerCase().equals("author"))
	{
		var author = rootChildren[i].content;
	}
	else if(rootChildren[i].tagName.toLowerCase().equals("creator"))
	{
		var creator = rootChildren[i].content;
	}
	else
	{
		print("odd");
	}
}

// function that determines if a list of strings
// contains a specified string
function contains(list, str)
{
	for(i=0;i<list.length;i++)
	{
		if(list[i].equals(str))
			return true;
	}
	return false;
}

// function that returns a list of the objects
// associated with given string
function getElementsByTagName(objectList, query)
{
	print("entering getElementsByTagName\n");
	var queryList = [];
	for(var objectListIndex = 0; objectListIndex < objectList.length; objectListIndex++)
	{
		mergeArrays(queryList,getElementsByTagNameHelper(queryList,objectList[objectListIndex],query));
	}
	return queryList;
}
function getElementsByTagNameHelper(list,object,query)
{
	print("entering helper\n");
	if(object.tagName != null)
	{
		if(object.tagName.toLowerCase().equals(query.toLowerCase()))
		{
			list.push(object);
		}
	}
	
	if(object.content != null)
	{
		var returnList = [];
		for(var i = 0; i < object.content.length; i++)
		{
			returnList = getElementsByTagNameHelper([], object.content[i], query);
		}
		mergeArrays(list,returnList);
	}
	
	print("exiting helper\n");
	return list;
}
// merges two arrays together
function mergeArrays(arr1, arr2)
{
	if(arr2 == null)
		print("shoot!\n");
	print(arr1 == arr2);
	print("arr1: " + arr1.length + "\n");
	print("arr2: " + arr2.length + "\n");
	print("entering merge arrays\n");
	print(arrIndex + "\n");
	for(var arrIndex = 0; arrIndex < arr2.length; arrIndex++)
	{
		arr1.push(arr2[arrIndex]);
	}
	print("exiting merge arrays\n");
	return arr1;
}

// returns text associated with an element
function getNodeTextRecursively(element)
{
	if(element.content[0] == null)
		return "";
	return element.content[0].text;
}

// given the root object, searches everything to see if it is an "important" tag
// if it is, increment the tag in the given count array
// assumes variables importantTags and importantTagsCount exist
function countImportantTags(root, importantTags, importantTagsCount)
{
	countImportantTagsHelper(root);
}
// recursive helper function that allows traversal of root for countImportantTags
function countImportantTagsHelper(node)
{
	// standard traversal all nodes contain a tagName, attributes, and content
	if(node.tagName != null && contains(importantTags, node.tagName.toLowerCase()))
	{
		importantTagsCount[node.tagName.toLowerCase()]++;
	}
	if(node.content != null)
	{
		for(var i = 0; i < node.content.length; i++)
		{
			countImportantTagsHelper(node.content[i]);
		}
	}
}