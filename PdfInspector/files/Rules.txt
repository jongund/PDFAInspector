// NOTE: This passage is easier to read in NotePad
// because certain lines are extremely long

// JsonObject that lists all rules
// it is required that all function look like
// function name(){...}
// if there are comments that belong to the function
// please locate them inside of the function

RuleList = {Rules:[
	{
	rule_id:"header_2",
	wcag_code:"2.4.6",
	sect508_code:"",
	param:tags,
	pass_message:"Headers are properly nested.",
	fail_message:"Headers are not properly nested.",
	title:"Headers must be properly nested",
	validate:
		function(tags)
		{
			var headerList = ["h1","h2","h3","h4","h5","h6"];
			function checkNestedHeaders(tags)
			{
				var result = true;
				for(var i = 0; i < tags.length; i++)
				{
					result = result && checkNestedHeadersHelper(tags[i],0);
				}
				return result;
			}
			function checkNestedHeadersHelper(tags, level)
			{
				var headerLevel = level;
				if(tags.tagName != null)
				{
					if(contains(headerList, tags.tagName))
					{
						headerLevel = parseInt(tags.tagName.substring(tags.tagName.length-1));
						
						if(headerLevel < level)
							return false;
					}
				}
				
				if(tags.content != null)
				{
					for(var i = 0; i < tags.content.length; i++)
					{
						return checkNestedHeadersHelper(tags.content[i], headerLevel)
					}
				}
				
				return true;
			}
			
			// variable local to function to store all the results
			var result = new Object();
			result.rule_id = "header_2";
			result.wcag_code = "2.4.6";
			result.sect508_code = "";
			result.test_results = new Array();
			
			// function call to begin rule validation
			var pass_fail = new Object();
			var passed = checkNestedHeaders(tags);
			if(passed)
			{
				pass_fail.passed = "true";
				pass_fail.message = "Headers are properly nested.";
			}
			else
			{
				pass_fail.passed = "false";
				pass_fail.message = "Headers are not properly nested.";
			}
			
			result.test_results.push(pass_fail);
			
			return result;
		}
	},
	{
	rule_id:"title_1",
	wcag_code:"2.4.2",
	sect508_code:"22.i",
	param:title,
	pass_message:"title tag is not empty, make sure it accurately describes the document",
	fail_message:"title tag is empty",
	title:"Title tag should not be empty.",
	validate:
		function(title)
		{
			// checks to see that the title tag is not empty
			function titleRuleCheckNonEmpty(title)
			{
				var pass_fail = new Object();
				if(title[0].text == null || title[0].text.equals(""))
				{
					pass_fail.passed = false;
					pass_fail.message = "title tag is empty";
				}
				else
				{
					pass_fail.passed = "true";
					pass_fail.message = "title tag is not empty, make sure it accurately describes the document";
				}
				
				return pass_fail;
			}
			
			
			// variable local to function to store all the results
			var result = new Object();
			result.rule_id = "title_1";
			result.wcag_code = "2.4.2";
			result.sect508_code = "22.i";
			result.test_results = new Array();

			// function call to begin rule validation
			result.test_results.push(titleRuleCheckNonEmpty(title));

			return result;
		}
	},
	{
	rule_id:"author_1",
	wcag_code:"2.4.2",
	sect508_code:"22.i",
	param:author,
	pass_message:"author tag is not empty, make sure it accurately describes the author of the document",
	fail_message:"author tag is empty",
	title:"Author tag should not be empty.",
	validate:
		function(author)
		{
			// checks to see that the author tag is not empty
			function titleRuleCheckNonEmpty(author)
			{
				var pass_fail = new Object();
				if(author[0].text == null || author[0].text.equals(""))
				{
					pass_fail.passed = false;
					pass_fail.message = "author tag is empty";
				}
				else
				{
					pass_fail.passed = "true";
					pass_fail.message = "author tag is not empty, make sure it accurately describes the document";
				}
				
				return pass_fail;
			}
			
			
			// variable local to function to store all the results
			var result = new Object();
			result.rule_id = "author_1";
			result.wcag_code = "2.4.2";
			result.sect508_code = "22.i";
			result.test_results = new Array();

			// function call to begin rule validation
			result.test_results.push(titleRuleCheckNonEmpty(author));

			return result;
		}
	},
	{
	rule_id:"tags_1",
	wcag_code:"1.1.1",
	sect508_code:"22.a",
	param:tags,
	pass_message:"this document is tagged",
	fail_message:"this document is not tagged",
	title:"Document should contain tags.",
	validate:
		function(tags)
		{
			// checks to see that tags exist
			function checkTagsExist(tags)
			{
				var pass_fail = new Object();
				print(tags.length);
				print(tags[0]);
				if(tags.length > 0)
				{
					pass_fail.passed = true;
					pass_fail.message = "this document is tagged";
				}
				else
				{
					pass_fail.passed = "false";
					pass_fail.message = "this document is not tagged";
				}
				
				return pass_fail;
			}
			
			
			// variable local to function to store all the results
			var result = new Object();
			result.rule_id = "tags_1";
			result.wcag_code = "1.1.1";
			result.sect508_code = "22.a";
			result.test_results = new Array();

			// function call to begin rule validation
			result.test_results.push(checkTagsExist(tags));

			return result;
		}
	}
]};

// all the code after this is required to call all validations
// in the rules list and then push the output onto a results
// list

// setup the results list
var resultsList = new Array();

// populate the results list
for(var rulesIndex = 0; rulesIndex < RuleList.Rules.length; rulesIndex++)
{
	// call the rule and store in rule result
	var ruleResult = RuleList.Rules[rulesIndex].validate(RuleList.Rules[rulesIndex].param);
	resultsList.push(ruleResult);
}

// important pdf tags
// 	sections: sect
// 	headings: h1-h6
// 	paragraphs: p
// 	captions: caption
// 	tables: table
// 	figures/images: figure
// 	lists: L
// 	forms: form
// 	bookmarks: Bookmark

// initialize search array
var importantTags = new Array();
importantTags.push("sect");
importantTags.push("h1");
importantTags.push("h2");
importantTags.push("h3");
importantTags.push("h4");
importantTags.push("h5");
importantTags.push("h6");
importantTags.push("p");
importantTags.push("caption");
importantTags.push("table");
importantTags.push("figure");
importantTags.push("l");

// initialize count array
var importantTagsCount = new Object();
importantTagsCount.sect = 0;
importantTagsCount.h1 = 0;
importantTagsCount.h2 = 0;
importantTagsCount.h3 = 0;
importantTagsCount.h4 = 0;
importantTagsCount.h5 = 0;
importantTagsCount.h6 = 0;
importantTagsCount.p = 0;
importantTagsCount.caption = 0;
importantTagsCount.table = 0;
importantTagsCount.figure = 0;
importantTagsCount.l = 0;
importantTagsCountLength = 12;

countImportantTags(root);

// add two separate important tags
importantTags.push("form");
importantTags.push("bookmark");
importantTagsCount.form = form.length;
importantTagsCount.bookmark = countBookmarks(bookmark);
importantTagsCountLength = 14;

// write results object to file
print("{\n");

// write results of tag counting to file (inside of results object)
print("	\"TagCount\":{\n");
for(item in importantTagsCount)
{
	print("		\"" + item + "\": \"" + importantTagsCount[item] + "\"");
	importantTagsCountLength--;
	if(importantTagsCountLength != 0)
		print(",\n");
	else
		print("\n");
}
print("	},\n");

// write results of rules to file (inside of results object)
print("	\"Results\":[\n");
for(var i = 0; i < resultsList.length; i++)
{
	print("		{\n");
	print("		\"rule_id\":\"" + resultsList[i].rule_id + "\",\n");
	print("		\"test_results\":[\n");

	var rule_results = resultsList[i].test_results;
	
	for(var j = 0; j < rule_results.length; j++)
	{
		print("			{\n");
		print("			\"passed\":\"" + rule_results[j].passed + "\",\n");
		print("			\"message\":\"" + rule_results[j].message + "\"\n");
		print("			}");
		if(j != rule_results.length - 1)
			print(",\n");
		else
			print("\n");
	}
	print("		],\n");
	print("		\"wcag_code\":\"" + resultsList[i].wcag_code + "\",\n");
	print("		\"sect508_code\":\"" + resultsList[i].sect508_code + "\"\n");
	print("		}");
	if(i != resultsList.length - 1)
		print(",\n");
	else
		print("\n");
}
print("	]\n");
print("}");