

// rules


// checks to see if tags exist at all
function tagged(tags)
{
	print("{\n");
	print("	\"rule_id\":\"3\",\n");

	if(tags == "")
	{
		print("	\"result\":\"violation\",\n");
		print("	\"message\":\"no tags exist for this document\"\n");
	}
	else
	{
		print("	\"result\":\"recommendation\",\n");
		print("	\"message\":\"tags exist, make sure that tags represent semantic structure of document\"\n");
	}

	print("},\n");
}


// checks to see if the title of the pdf document is not empty
function titleformatted(title)
{
	if(title != null)
	{
		print("{\n");
		print("	\"rule_id\":\"5\",\n");

		if(title == "")
		{
			print("	\"result\":\"violation\",\n");
			print("	\"message\":\"title is empty\"\n");
		}
		else
		{
			print("	\"result\":\"recommendation\",\n");
			print("	\"message\":\"title exist, make sure that title encorporates what document is about\"\n");
		}

		print("},\n");
	}
}


// checks to see that the first heading tag is an h1 tag
// currently assuming tags go from h1 to h6
function headingformatted(tags)
{
	curheadtag = 0;
	if(tags != "")
	{
		hlist = ["h1","h2","h3","h4","h5","h6"];

		headingformat(tags);
	}
}
function headingformat(tags)
{
	for(item in tags)
	{
		var val = tags[item];
		// if its a heading
		if(contains(hlist,item.toLowerCase()))
		{
			if(curheadtag==0)
			{
				if(!item.equals(hlist[0]))
				{
					print("{\n");
					print("	\"rule_id\":\"7\",\n");
					print("	\"result\":\"violation\",\n");
					print("	\"message\":\"first heading tag is not h1\"\n");
					print("},\n");
					return;
				}
				else
				{
					print("{\n");
					print("	\"rule_id\":\"7\",\n");
					print("	\"result\":\"recommendation\",\n");
					print("	\"message\":\"first heading tag is h1, \"\n");
					print("},\n");
					return;
				}
			}
			curheadtag++;
		}
		else if(val.constructor == Array)
		{
			for(i=0;i<val.length;i++)
			{
				headingformat(val[i]);
			}
		}
		else{
			headingformat(val);
		}
	}
}


// checks to see that all heading tags contain non-empty text
function headingcontent(tags)
{
	failed = false;
	headingtagsexist = false;
	if(tags != "")
	{
		hlist = ["h1","h2","h3","h4","h5","h6"];

		headingcont(tags);

		if(!failed && headingtagsexist)
		{
			print("{\n");
			print("	\"rule_id\":\"8\",\n");
			print("	\"result\":\"recommendation\",\n");
			print("	\"message\":\"all heading tags contain content, make sure content of all heading tags are meaningful\"\n");
			print("},\n");
		}

	}
}
function headingcont(tags)
{
	for(item in tags)
	{
		var val = tags[item];
		// if its a heading
		if(contains(hlist,item.toLowerCase()))
		{
			if(val == "")
			{
				print("{\n");
				print("	\"rule_id\":\"8\",\n");
				print("	\"result\":\"violation\",\n");
				print("	\"message\":\"heading tag " + item + " is empty\"\n");
				print("},\n");
				failed = true;
				return;
			}
		}
		else if(val.constructor == Array)
		{
			for(i=0;i<val.length;i++)
			{
				headingcont(val[i]);
			}
		}
		else{
			headingcont(val);
		}
	}
}

// checks bookmarks & header correspondence rules
// Rule: ##
function bookmarksHeader(pageNum, Bookmark, tags){
	pass = true;
	var blist = ["content"]; //bookmark values to look for
	
	print("{\n");
	
	// rule #
	if (pageNum >= 100){
		print("	\"rule_id\":\"Page Num >= 8\",\n");	
		hlist = ["h1","h2","h3","h4"];
		message = "there exists at least one h1, h2, h3, or h4 tag that is not a bookmark\"";
		
		bookmarksHeaderLoop(Bookmark, tags, hlist, blist, message);
		if (pass){
			print("PASS!!");
		}		
	}
	// rule #
	else if (pageNum >= 40){
		print("	\"rule_id\":\"Page Num >= 8\",\n");	
		hlist = ["h1","h2","h3"];
		message = "there exists at least one h1, h2, or h3 tag that is not a bookmark\"";
		
		bookmarksHeaderLoop(Bookmark, tags, hlist, blist, message);
		if (pass){
			print("PASS!!");
		}		
	}
	// rule #
	else if (pageNum >= 1){
		print("	\"rule_id\":\"Page Num >= 8\",\n");	
		hlist = ["h1","h2"];
		message = "there exists at least one h1 or h2 tag that is not a bookmark\"";
		
		bookmarksHeaderLoop(Bookmark, tags, hlist, blist, message);
		if (pass){
			print("PASS!!");
		}		

	}
	
	print("},\n");
}

// helper function of bookmarksHeader; loops through all headers
// Rule: ##
function bookmarksHeaderLoop(Bookmark, tags, hlist, blist, message){
	bookmarkExists = false;
	
	for (item in tags){
		var val = tags[item];
		print("Tag val: " + val + "\n");
		print("Tag item: " + item+ "\n");

		// if val is an array
		if (val.constructor == Array){
			
			//if val array contains headers
			if(contains(hlist,item.toLowerCase())){
				//traverse through array
				for (i=0;i<val.length;i++){
					print("i: " + i + "\n");
					print("val[i]: " + val[i] +"\n");
					if(!existsBookmark(Bookmark, val[i], blist)){
						print("	\"result\":\"violation\",\n");
						print("	\"message!!\":\"" + message + "  " + val[i] + "\n");
						pass = false;
						return;
					}
					print("done with round " + i + "\n");
				}
			}
			
			else{
				for (i=0; i<val.length;i++){
					bookmarksHeaderLoop(Bookmark, val[i], hlist, blist, message);
				}
			}
		}
		// if item is a header in hlist
		else if(contains(hlist,item.toLowerCase())){
			if(!existsBookmark(Bookmark, val, blist)){
				print("	\"result\":\"violation\",\n");
				print("	\"message\":\"" + message + "  " + val + "\n");
				pass = false;
				return;
			}
			
		}
		// if nested
		else if (val.constructor == Object){
			bookmarksHeaderLoop(Bookmark, val, hlist, blist, message);
		}
	}
}

// returns if a bookmark exists with the given label
// Rule: ##
function existsBookmark(Bookmark, label, blist){
	
	for (item in Bookmark){
		var val = Bookmark[item];
		print("Bookmark item: " + item + "\n");
		print("Bookmark Val: " + val + "\n");
		
		// if an array
		if (val.constructor == Array){
			for(j=0;j<val.length;j++){
				print ("j: " + j + " val[j]: " + val[j] + "\n");
				if(existsBookmark(val[j], label, blist)){
					return true;
				}
			}
			
		}			
		// if looking at "Content" field
		else if (contains(blist,item.toLowerCase())){
			print("Content found. Label: " + label + " val: " + val + " \n");
			if (val == label){
				bookmarkExists = true;
				return bookmarkExists;
			}
		
		}
		// if nested
		else if (val.constructor == Object) {
			print("Bookmark nested, label: " + label + " val: " + val  + "\n");
			return existsBookmark(val, label, blist);
		}
		
		
	}
	
	return bookmarkExists;
}



// checks to see that tables are at least 2 by 2
function tableformatted(table)
{
	print("{\n");
	print("	\"rule_id\":\"10\",\n");

	for(row in table)
	{
		var numcols = 0;
		if(row.toLowerCase() != "tr")
		{
			continue;
			print("table format error?\n");
			return;
		}
		else if(table[row].length >= 2)
		{
		}
		else
		{
			print("	\"result\":\"violation\",\n");
			print("	\"message\":\"this table does not have at least 2 rows\"\n");
		}
		for(i=0; i<table[row].length; i=i+1)
		{
			for(td in table[row][i])
			{
				if(td.toLowerCase() != "td")
				{
					continue;
					print("table format error?\n");
					return;
				}
				if(table[row][i][td].length > numcols)
					numcols = table[row][i][td].length;
			}
		}
		if(numcols >= 2)
		{
			print("	\"result\":\"recommendation\",\n");
			print("	\"message\":\"this table is at least 2 x 2, check to see that the table contains useful content\"\n");
		}
		else
		{
			print("	\"result\":\"violation\",\n");
			print("	\"message\":\"this table does not have at least 2 columns\"\n");
		}
		
	}

	print("},\n");
}


// a tooltip exists for every form control
function needed_tooltips_exist(form)
{
	all_tooltips_exist = true;
	any_tooltip_exists = false;
	all_tooltips_nonempty = true;
	if(form != "")
	{
		for(item in form)
		{
			check_tooltip(form[item]);
		}

		print("{\n");
		print("	\"rule_id\":\"16\",\n");

		if(all_tooltips_exist)
		{
			
			print("	\"result\":\"recommendation\",\n");
			print("	\"message\":\"tooltips exist for all form controls, make sure that these tooltips accurately describe the control\"\n");
		}
		else
		{
			
			print("	\"result\":\"violation\",\n");
			print("	\"message\":\"missing tooltips for certain form controls\"\n");
		}

		print("},\n");

		if(any_tooltip_exists)
		{
			print("{\n");
			print("	\"rule_id\":\"17\",\n");
			
			if(all_tooltips_nonempty)
			{
				print("	\"result\":\"recommendation\",\n");
				print("	\"message\":\"all tooltips are non-empty, make sure that descriptions are useful\"\n");
			}
			else
			{
				print("	\"result\":\"violation\",\n");
				print("	\"message\":\"missing descriptions for certain tooltips, please make sure that all tooltips accurately describe their form controls\"\n");
			}

			print("},\n");
		}

	}
}
function check_tooltip(arr)
{
	for(i=0;i<arr.length;i++)
	{
		tooltip_exists(arr[i]);
	}
}
function tooltip_exists(obj)
{
	local_tooltip_exists = false;
	for(item in obj)
	{
		if(item == "Tooltip")
		{
			local_tooltip_exists = true;
			any_tooltip_exists = true;
			if(obj[item] == "")
				all_tooltips_nonempty = false;
		}
	}
	if(!local_tooltip_exists)
		all_tooltips_exist = false;
	return;
}