// NOTE: This page is easier to read in NotePad
// because certain lines are extremely long

// JsonObject that lists all rules
// it is required that all function look like
// function name(){...}
// if there are comments that belong to the function
// please locate them inside of the function

// beware, the validate part of the rule can be tricky
// when entering it into this list
// I have created a StringFlattener class for this purpose
// look at StringFlattener.java for details on what is required
// for the rules processor to be able to successfully process
// a validation string

// there is a problem with processing the print statement
// that contains quoted strings (e.g. print("\"a\":\"b\"))
// because there are already backslashes in these statements
// and i would have to differentiate these backslashed quotes
// from quotes that were not before but are now backslashed
// to be entered in as a validation

RuleList = {Rules:[
	{
	rule_id:"rule_1",
	wcag_code:"1.3.1",
	sect508_code:"22.a",
	validate:"function tablerule(tags)\n{\n	// checks to see that tables have a summary attribute\n	// standard traversal (either an array or object list or string)\n	if(tags.constructor == Array)\n	{\n		for(var i=0\;i<tags.length\;i++)\n		{\n			tablerule(tags[i])\;\n		}\n	}\n	// base case\n	else if(tags.constructor == String)\n	{\n	}\n	else\n	{\n		for(item in tags)\n		{\n			var val = tags[item]\;\n			if(item.toLowerCase() == \"table\")\n			{\n				tablesExist = true\;\n				tablerulecheckSummaryexists(val)\;\n			}\n			else\n				tablerule(val)\;\n		}\n	}\n}\nfunction tablerulecheckSummaryexists(table)\n{\n	var contains = false\;\n	var allSummaryAttributesNonEmpty = true\;\n	var result = new Object()\;\n	result.rule_id = \"7\"\;\n	result.wcag_code = \"1.1.1\"\;\n	result.sect508_code = \"22.g\"\;\n	for(item in table)\n	{\n		if(item.toLowerCase() == \"summary\")\n		{\n			contains = true\;\n			if(table[item] == \"\")\n				allSummaryAttributesNonEmpty = false\;\n		}\n	}\n\n	if(!contains)\n	{\n		result.result = \"violation\"\;\n		result.message = \"this table does not contain the summary attribute\"\;\n	}\n	else\n	{\n		result.result = \"recommendation\"\;\n		result.message = \"this table does contain the summary attribute, please make sure the summary is an accurate description of the table\"\;\n	}\n	return result\;\n}\n",
	pass_message:"this table contains the summary attribute, please make sure the summary is an accurate description of the table",
	fail_message:"this table does not contain the summary attribute",
	title:"Data tables must use summary attribute."
	}
]};

// all the code after this is required to call all validations
// in the rules list and then push the output onto a results
// list

// setup the results string
print("var resultsString = \"\";");
print("resultsString += \"{Results:[\";");

for(var i = 0; i < RuleList.Rules.length; i++)
{
	// print the rule validation code from the rules list
	var validation = RuleList.Rules[i].validate;
	print(validation);

	// grab the function signature so that we can call it
	var endFunctionSignature = validation.indexOf(")");
	var functionSignature = validation.substring("function ".length, endFunctionSignature + 1);
	functionSignature += ";";

	// call the function and push the result onto the
	// results list
	print("singleRuleResult = " + functionSignature);
	print("resultsString += \"	{\";");
	print("resultsString += \"	\\\"rule_id\\\":\\\"\" + singleRuleResult.rule_id + \"\\\",\";");
	print("resultsString += \"	\\\"test_results\\\":\\\"\" + singleRuleResult.result + \"\\\",\";");
	print("resultsString += \" \\\"wcag_code\\\":\\\"\" + singleRuleResult.wcag_code + \"\\\",\";");
	print("resultsString += \" \\\"sect508_code\\\":\\\"\" + singleRuleResult.sect508_code + \"\\\",\";");
	print("resultsString += \"	}\";");
	print("resultsString += \"]};\";");
}

// close the results list
print("]}\;");
